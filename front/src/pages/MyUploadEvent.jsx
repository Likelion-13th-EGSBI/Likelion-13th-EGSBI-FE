import React, { useEffect, useState, useCallback } from "react";
import Layout from "../components/Layout";
import EventCard from "../components/EventCard"; // EventCard Ïª¥Ìè¨ÎÑåÌä∏ import
import '../css/myuploadevent.css';
import { useNavigate } from "react-router-dom";

// ReviewModal Ïª¥Ìè¨ÎÑåÌä∏
const ReviewModal = ({ isOpen, onClose, eventId, eventName }) => {
    const [reviews, setReviews] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ÏùÑ localStorageÏóêÏÑú Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
    const getAccessToken = () => {
        return localStorage.getItem('accessToken');
    };

    // Î¶¨Î∑∞ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const fetchReviews = async () => {
        if (!eventId) return;
        
        setLoading(true);
        setError(null);
        
        try {
            const accessToken = getAccessToken();
            if (!accessToken) {
                throw new Error('Ïù∏Ï¶ù ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§.');
            }

            const response = await fetch(
                `https://gateway.gamja.cloud/api/activity/review/eventlist?eventId=${eventId}`,
                {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${accessToken}`
                    }
                }
            );

            if (!response.ok) {
                if (response.status === 401) {
                    throw new Error('Ïù∏Ï¶ùÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
                } else if (response.status === 404) {
                    throw new Error('Ìï¥Îãπ ÌñâÏÇ¨Ïùò Î¶¨Î∑∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                }
                throw new Error(`ÏÑúÎ≤Ñ Ïò§Î•ò: ${response.status}`);
            }

            const data = await response.json();
            
            // API ÏùëÎãµÏù¥ Î∞∞Ïó¥Ïù∏ Í≤ΩÏö∞ÏôÄ Í∞ùÏ≤¥ ÌòïÌÉúÏù∏ Í≤ΩÏö∞ Î™®Îëê Ï≤òÎ¶¨
            if (Array.isArray(data)) {
                setReviews(data);
            } else if (data && Array.isArray(data.content)) {
                setReviews(data.content);
            } else {
                setReviews([]);
            }
            
        } catch (error) {
            console.error('Î¶¨Î∑∞ Ï°∞Ìöå Ïò§Î•ò:', error);
            setError(error.message);
            setReviews([]);
        } finally {
            setLoading(false);
        }
    };

    // Î™®Îã¨Ïù¥ Ïó¥Î¶¥ Îïå Î¶¨Î∑∞ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    useEffect(() => {
        if (isOpen && eventId) {
            fetchReviews();
        }
    }, [isOpen, eventId]);

    // Î™®Îã¨Ïù¥ Îã´Ìûê Îïå ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    useEffect(() => {
        if (!isOpen) {
            setReviews([]);
            setError(null);
        }
    }, [isOpen]);

    // Î≥ÑÏ†ê Î†åÎçîÎßÅ
    const renderStars = (rating) => {
        const stars = [];
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 !== 0;
        
        for (let i = 0; i < fullStars; i++) {
            stars.push(<span key={i} className="review-star review-star-filled">‚òÖ</span>);
        }
        
        if (hasHalfStar) {
            stars.push(<span key="half" className="review-star review-star-half">‚òÖ</span>);
        }
        
        const remainingStars = 5 - Math.ceil(rating);
        for (let i = 0; i < remainingStars; i++) {
            stars.push(<span key={`empty-${i}`} className="review-star review-star-empty">‚òÜ</span>);
        }
        
        return stars;
    };

    // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
    const formatDate = (dateString) => {
        if (!dateString) return '';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ko-KR', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            return dateString;
        }
    };

    // ÌèâÍ∑† Î≥ÑÏ†ê Í≥ÑÏÇ∞
    const calculateAverageRating = () => {
        if (reviews.length === 0) return 0;
        const total = reviews.reduce((sum, review) => sum + (review.rating || 0), 0);
        return (total / reviews.length).toFixed(1);
    };

    // ESC ÌÇ§Î°ú Î™®Îã¨ Îã´Í∏∞
    useEffect(() => {
        const handleEsc = (event) => {
            if (event.keyCode === 27) {
                onClose();
            }
        };
        
        if (isOpen) {
            document.addEventListener('keydown', handleEsc);
            document.body.style.overflow = 'hidden'; // Ïä§ÌÅ¨Î°§ Î∞©ÏßÄ
        }
        
        return () => {
            document.removeEventListener('keydown', handleEsc);
            document.body.style.overflow = 'unset';
        };
    }, [isOpen, onClose]);

    if (!isOpen) return null;

    return (
        <div className="review-modal-overlay" onClick={onClose}>
            <div className="review-modal-content" onClick={(e) => e.stopPropagation()}>
                {/* Ìó§Îçî */}
                <div className="review-modal-header">
                    <div className="review-modal-title-section">
                        <h2 className="review-modal-main-title">Î¶¨Î∑∞</h2>
                        <p className="review-modal-event-name">{eventName}</p>
                    </div>
                    <button className="review-modal-close-button" onClick={onClose}>
                        ‚úï
                    </button>
                </div>

                {/* Î¶¨Î∑∞ ÌÜµÍ≥Ñ */}
                {!loading && !error && reviews.length > 0 && (
                    <div className="review-modal-statistics">
                        <div className="review-stats-rating-section">
                            <span className="review-average-rating-number">{calculateAverageRating()}</span>
                            <div className="review-stars-container">
                                {renderStars(parseFloat(calculateAverageRating()))}
                            </div>
                        </div>
                        <div className="review-stats-count-section">
                            Ï¥ù <strong className="review-count-number">{reviews.length}</strong>Í∞úÏùò Î¶¨Î∑∞
                        </div>
                    </div>
                )}

                {/* ÏΩòÌÖêÏ∏† */}
                <div className="review-modal-body">
                    {loading && (
                        <div className="review-modal-loading-state">
                            <div className="review-loading-spinner"></div>
                            <p className="review-loading-text">Î¶¨Î∑∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                        </div>
                    )}

                    {error && (
                        <div className="review-modal-error-state">
                            <div className="review-error-icon">‚ö†Ô∏è</div>
                            <p className="review-error-message">{error}</p>
                            <button 
                                className="review-error-retry-button"
                                onClick={fetchReviews}
                            >
                                Îã§Ïãú ÏãúÎèÑ
                            </button>
                        </div>
                    )}

                    {!loading && !error && reviews.length === 0 && (
                        <div className="review-modal-empty-state">
                            <div className="review-empty-icon">üìù</div>
                            <h3 className="review-empty-title">ÏïÑÏßÅ Î¶¨Î∑∞Í∞Ä ÏóÜÏñ¥Ïöî</h3>
                        </div>
                    )}

                    {!loading && !error && reviews.length > 0 && (
                        <div className="review-modal-list-container">
                            {reviews.map((review, index) => (
                                <div key={review.id || index} className="review-list-item">
                                    <div className="review-item-header-section">
                                        <div className="review-user-information">
                                            <span className="review-user-id-text">
                                                ÏÇ¨Ïö©Ïûê {review.userId || 'ÏùµÎ™Ö'}
                                            </span>
                                            <span className="review-created-date">
                                                {formatDate(review.createdAt)}
                                            </span>
                                        </div>
                                        <div className="review-rating-section">
                                            <div className="review-rating-stars">
                                                {renderStars(review.rating || 0)}
                                            </div>
                                            <span className="review-rating-number-text">
                                                ({review.rating || 0})
                                            </span>
                                        </div>
                                    </div>
                                    {review.content && (
                                        <div className="review-content-section">
                                            <p className="review-content-text">{review.content}</p>
                                        </div>
                                    )}
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* Ìë∏ÌÑ∞ */}
                <div className="review-modal-footer">
                    <button className="review-modal-close-footer-button" onClick={onClose}>
                        Îã´Í∏∞
                    </button>
                </div>
            </div>
        </div>
    );
};

const MyUploadEvent = () => {
    const navigate = useNavigate();
    const [events, setEvents] = useState([]);
    const [loading, setLoading] = useState(true);
    const [loadingMore, setLoadingMore] = useState(false);
    const [currentPage, setCurrentPage] = useState(0);
    const [hasMore, setHasMore] = useState(true);
    const [pageSize] = useState(10); // ÌéòÏù¥ÏßÄÎãπ ÏïÑÏù¥ÌÖú Ïàò
    
    // Î¶¨Î∑∞ Î™®Îã¨ ÏÉÅÌÉú
    const [reviewModal, setReviewModal] = useState({
        isOpen: false,
        eventId: null,
        eventName: ''
    });

    // ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò IDÎ•º localStorageÏóêÏÑú Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
    const getCurrentUserId = () => {
        const userId = localStorage.getItem('userId');
        if (!userId) {
            console.error('ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
            navigate('/login');
            return null;
        }
        return userId;
    };

    // Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ÏùÑ localStorageÏóêÏÑú Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
    const getAccessToken = () => {
        const token = localStorage.getItem('accessToken');
        if (!token) {
            console.error('Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
            navigate('/login');
            return null;
        }
        return token;
    };

    // ÎßàÌÅ¨Îã§Ïö¥ÏùÑ HTMLÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
    const markdownToHtml = (markdown) => {
        if (!markdown) return 'ÏÑ§Î™ÖÏù¥ ÏóÜÏäµÎãàÎã§.';
        
        let html = markdown
            // Ìó§Îçî
            .replace(/^### (.*$)/gim, '<h3 class="md-heading md-heading-3">$1</h3>')
            .replace(/^## (.*$)/gim, '<h2 class="md-heading md-heading-2">$1</h2>')
            .replace(/^# (.*$)/gim, '<h1 class="md-heading md-heading-1">$1</h1>')
            // ÍµµÏùÄ Í∏ÄÏî®
            .replace(/\*\*(.*?)\*\*/gim, '<strong class="md-bold">$1</strong>')
            .replace(/__(.*?)__/gim, '<strong class="md-bold">$1</strong>')
            // Í∏∞Ïö∏ÏûÑ
            .replace(/\*(.*?)\*/gim, '<em class="md-italic">$1</em>')
            .replace(/_(.*?)_/gim, '<em class="md-italic">$1</em>')
            // ÏΩîÎìú Î∏îÎ°ù
            .replace(/```([\s\S]*?)```/gim, '<pre class="md-code-block"><code class="md-code-block-content">$1</code></pre>')
            // Ïù∏ÎùºÏù∏ ÏΩîÎìú
            .replace(/`(.*?)`/gim, '<code class="md-code-inline">$1</code>')
            // ÎßÅÌÅ¨
            .replace(/\[([^\]]+)\]\(([^)]+)\)/gim, '<a href="$2" target="_blank" rel="noopener noreferrer" class="md-link">$1</a>')
            // Ïù¥ÎØ∏ÏßÄ
            .replace(/!\[([^\]]*)\]\(([^)]+)\)/gim, '<img src="$2" alt="$1" class="md-image" />')
            // Ïù∏Ïö©Íµ¨
            .replace(/^> (.*$)/gim, '<blockquote class="md-blockquote">$1</blockquote>')
            // ÏàúÏÑúÏóÜÎäî Î¶¨Ïä§Ìä∏
            .replace(/^\* (.*$)/gim, '<li class="md-list-item">$1</li>')
            .replace(/^- (.*$)/gim, '<li class="md-list-item">$1</li>')
            // ÏàúÏÑúÏûàÎäî Î¶¨Ïä§Ìä∏
            .replace(/^\d+\. (.*$)/gim, '<li class="md-list-item md-list-item-ordered">$1</li>');

        // Ï§ÑÎ∞îÍøàÏùÑ Îã®ÎùΩÏúºÎ°ú Ï≤òÎ¶¨
        const lines = html.split('\n');
        const processedLines = [];
        
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            
            // Îπà Ï§ÑÏùÄ Îã®ÎùΩ Íµ¨Î∂ÑÏûêÎ°ú ÏÇ¨Ïö©
            if (line === '') {
                processedLines.push('');
                continue;
            }
            
            // Ïù¥ÎØ∏ HTML ÌÉúÍ∑∏Î°ú Ï≤òÎ¶¨Îêú Ï§ÑÏùÄ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
            if (line.match(/^<(h[1-3]|blockquote|pre|li)/)) {
                processedLines.push(line);
            } else if (line.length > 0) {
                // ÏùºÎ∞ò ÌÖçÏä§Ìä∏Îäî Îã®ÎùΩÏúºÎ°ú Í∞êÏã∏Í∏∞
                processedLines.push(`<p class="md-paragraph">${line}</p>`);
            }
        }

        // Î¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖúÎì§ÏùÑ ul/olÎ°ú Í∞êÏã∏Í∏∞
        const finalHtml = processedLines.join('\n')
            .replace(/(<li class="md-list-item"[^>]*>.*?<\/li>\s*)+/gs, (match) => {
                return `<ul class="md-list">${match}</ul>`;
            })
            .replace(/(<li class="md-list-item md-list-item-ordered"[^>]*>.*?<\/li>\s*)+/gs, (match) => {
                return `<ol class="md-list md-list-ordered">${match}</ol>`;
            });

        return finalHtml;
    };

    // ÎßàÌÅ¨Îã§Ïö¥ ÏÑ§Î™ÖÏùÑ ÌÖçÏä§Ìä∏Î°úÎßå Î≥ÄÌôò (ÏöîÏïΩÏö©)
    const markdownToText = (markdown) => {
        if (!markdown) return 'ÏÑ§Î™ÖÏù¥ ÏóÜÏäµÎãàÎã§.';
        
        // ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞ÌïòÍ≥† ÌÖçÏä§Ìä∏Îßå Ï∂îÏ∂ú
        let text = markdown
            .replace(/^#{1,6}\s+/gm, '') // Ìó§Îçî Ï†úÍ±∞
            .replace(/\*\*(.*?)\*\*/g, '$1') // ÍµµÏùÄ Í∏ÄÏî®
            .replace(/__(.*?)__/g, '$1') // ÍµµÏùÄ Í∏ÄÏî®
            .replace(/\*(.*?)\*/g, '$1') // Í∏∞Ïö∏ÏûÑ
            .replace(/_(.*?)_/g, '$1') // Í∏∞Ïö∏ÏûÑ
            .replace(/```[\s\S]*?```/g, '[ÏΩîÎìú]') // ÏΩîÎìú Î∏îÎ°ù
            .replace(/`(.*?)`/g, '$1') // Ïù∏ÎùºÏù∏ ÏΩîÎìú
            .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // ÎßÅÌÅ¨
            .replace(/!\[([^\]]*)\]\([^)]+\)/g, '[Ïù¥ÎØ∏ÏßÄ]') // Ïù¥ÎØ∏ÏßÄ
            .replace(/^>\s+/gm, '') // Ïù∏Ïö©Íµ¨
            .replace(/^[\*\-\+]\s+/gm, '‚Ä¢ ') // ÏàúÏÑúÏóÜÎäî Î¶¨Ïä§Ìä∏
            .replace(/^\d+\.\s+/gm, '‚Ä¢ ') // ÏàúÏÑúÏûàÎäî Î¶¨Ïä§Ìä∏
            .replace(/\n{2,}/g, ' ') // Ïó¨Îü¨ Ï§ÑÎ∞îÍøàÏùÑ Í≥µÎ∞±ÏúºÎ°ú
            .replace(/\n/g, ' ') // Ï§ÑÎ∞îÍøàÏùÑ Í≥µÎ∞±ÏúºÎ°ú
            .trim();
        
        // Í∏∏Ïù¥ Ï†úÌïú (ÏöîÏïΩÏö©)
        if (text.length > 100) {
            text = text.substring(0, 97) + '...';
        }
        
        return text;
    };

    const fetchEvents = useCallback(async (page = 0, isLoadMore = false) => {
        try {
            if (!isLoadMore) {
                setLoading(true);
            } else {
                setLoadingMore(true);
            }

            const userId = getCurrentUserId();
            const accessToken = getAccessToken();
            
            // ÌÜ†ÌÅ∞Ïù¥ÎÇò ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÏóÜÏúºÎ©¥ ÏöîÏ≤≠ÌïòÏßÄ ÏïäÏùå
            if (!userId || !accessToken) {
                return;
            }
            
            // URL ÌååÎùºÎØ∏ÌÑ∞ Íµ¨ÏÑ±
            const params = new URLSearchParams({
                page: page.toString(),
                size: pageSize.toString(),
                sort: 'createTime,DESC' // ÏµúÏã†Ïàú Ï†ïÎ†¨
            });

            const response = await fetch(
                `https://gateway.gamja.cloud/api/event/${userId}?${params}`, 
                {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${accessToken}` // Ïù∏Ï¶ù Ìó§Îçî Ï∂îÍ∞Ä
                    },
                }
            );

            if (!response.ok) {
                // 401 Unauthorized Ï≤òÎ¶¨
                if (response.status === 401) {
                    console.error('Ïù∏Ï¶ùÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.');
                    localStorage.removeItem('accessToken');
                    localStorage.removeItem('userId');
                    localStorage.removeItem('userEmail');
                    localStorage.removeItem('tokenExpiration');
                    navigate('/login');
                    return;
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            // APIÍ∞Ä ÌéòÏù¥ÏßïÎêú ÏùëÎãµÏùÑ Î∞òÌôòÌïòÎäî Í≤ΩÏö∞
            if (data && typeof data === 'object' && 'content' in data) {
                const newEvents = data.content || [];
                
                if (isLoadMore) {
                    setEvents(prevEvents => {
                        // Ï§ëÎ≥µ Ï†úÍ±∞: Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ IDÎì§Í≥º ÏÉà Ïù¥Î≤§Ìä∏ IDÎì§ÏùÑ ÎπÑÍµê
                        const existingIds = new Set(prevEvents.map(event => event.id));
                        const uniqueNewEvents = newEvents.filter(event => !existingIds.has(event.id));
                        return [...prevEvents, ...uniqueNewEvents];
                    });
                } else {
                    setEvents(newEvents);
                }
                
                // Îçî Í∞ÄÏ†∏Ïò¨ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
                const isLastPage = data.last || false;
                const totalPages = data.totalPages || 0;
                setHasMore(!isLastPage && page + 1 < totalPages);
                setCurrentPage(data.number || 0);
            } 
            // APIÍ∞Ä Î∞∞Ïó¥ÏùÑ ÏßÅÏ†ë Î∞òÌôòÌïòÎäî Í≤ΩÏö∞ (Í∏∞Ï°¥ Î∞©Ïãù)
            else if (Array.isArray(data)) {
                if (isLoadMore) {
                    setEvents(prevEvents => {
                        // Ï§ëÎ≥µ Ï†úÍ±∞: Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ IDÎì§Í≥º ÏÉà Ïù¥Î≤§Ìä∏ IDÎì§ÏùÑ ÎπÑÍµê
                        const existingIds = new Set(prevEvents.map(event => event.id));
                        const uniqueNewEvents = data.filter(event => !existingIds.has(event.id));
                        return [...prevEvents, ...uniqueNewEvents];
                    });
                } else {
                    setEvents(data);
                }
                
                // Î∞∞Ïó¥ Î∞©ÏãùÏóêÏÑúÎäî Î∞òÌôòÎêú Îç∞Ïù¥ÌÑ∞ Í∏∏Ïù¥Î°ú ÌåêÎã®
                setHasMore(data.length === pageSize);
            } 
            else {
                if (!isLoadMore) {
                    setEvents([]);
                }
                setHasMore(false);
            }

        } catch (error) {
            console.error('Error fetching events:', error);
            if (!isLoadMore) {
                setEvents([]);
            }
            setHasMore(false);
            
            // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÎÇò ÏÑúÎ≤Ñ Ïò§Î•ò Ïãú ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º
            if (error.message.includes('fetch')) {
                alert('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
            } else {
                alert('ÌñâÏÇ¨ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }
        } finally {
            if (!isLoadMore) {
                setLoading(false);
            } else {
                setLoadingMore(false);
            }
        }
    }, [pageSize, navigate]);

    // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
    useEffect(() => {
        const userId = localStorage.getItem('userId');
        const accessToken = localStorage.getItem('accessToken');
        const tokenExpiration = localStorage.getItem('tokenExpiration');
        
        // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
        if (!userId || !accessToken || !tokenExpiration) {
            console.log('Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.');
            navigate('/login');
            return;
        }
        
        // ÌÜ†ÌÅ∞ ÎßåÎ£å ÌôïÏù∏
        const now = Date.now();
        const expiration = parseInt(tokenExpiration);
        
        if (now >= expiration) {
            console.log('ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.');
            localStorage.removeItem('accessToken');
            localStorage.removeItem('userId');
            localStorage.removeItem('userEmail');
            localStorage.removeItem('tokenExpiration');
            navigate('/login');
            return;
        }
        
        // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÍ∞Ä Ïú†Ìö®ÌïòÎ©¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        fetchEvents(0, false);
    }, [navigate, fetchEvents]);

    // Î¨¥Ìïú Ïä§ÌÅ¨Î°§ÏùÑ ÏúÑÌïú Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
    const handleScroll = useCallback(() => {
        // Î°úÎî© Ï§ëÏù¥Í±∞ÎÇò Îçî Í∞ÄÏ†∏Ïò¨ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ return
        if (loadingMore || !hasMore) return;

        // Ïä§ÌÅ¨Î°§Ïù¥ Î∞îÎã•Ïóê Í∞ÄÍπåÏù¥ Í∞îÎäîÏßÄ ÌôïÏù∏ (100px Ïó¨Ïú†)
        const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
        const scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;
        const clientHeight = document.documentElement.clientHeight;

        if (scrollTop + clientHeight >= scrollHeight - 100) {
            // Îã§Ïùå ÌéòÏù¥ÏßÄ Î°úÎìú
            const nextPage = currentPage + 1;
            setCurrentPage(nextPage);
            fetchEvents(nextPage, true);
        }
    }, [loadingMore, hasMore, currentPage, fetchEvents]);

    // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù/Ìï¥Ï†ú
    useEffect(() => {
        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, [handleScroll]);

    const formatDate = (dateString) => {
        const date = new Date(dateString);
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${month}.${day}`;
    };

    const formatTime = (dateString) => {
        const date = new Date(dateString);
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${hours}:${minutes}`;
    };

    const handleAddEvent = () => {
        navigate('/event-upload');
    };

    const handleEventClick = (eventId) => {
        // ÌñâÏÇ¨ ÏÉÅÏÑ∏ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        console.log('ÌñâÏÇ¨ ÏÉÅÏÑ∏:', eventId);
        navigate(`/events/${eventId}`);
    };

    const handleBookmarkToggle = (eventId) => {
        // Î∂ÅÎßàÌÅ¨ ÌÜ†Í∏Ä Î°úÏßÅ (ÌòÑÏû¨Îäî Î°úÍ∑∏Îßå Ï∂úÎ†•)
        console.log('Î∂ÅÎßàÌÅ¨ ÌÜ†Í∏Ä:', eventId);
    };

    const handleEditEvent = (event) => {
        // ÌñâÏÇ¨ ÏàòÏ†ï ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô - ÌñâÏÇ¨ Îç∞Ïù¥ÌÑ∞Î•º stateÎ°ú Ï†ÑÎã¨
        console.log('ÌñâÏÇ¨ ÏàòÏ†ï:', event);
        navigate(`/event-edit/${event.id}`, { 
            state: { eventData: event } 
        });
    };

    const handleViewReviews = (eventId, eventName) => {
        // Î¶¨Î∑∞ Î™®Îã¨ Ïó¥Í∏∞
        console.log('Î¶¨Î∑∞ Î≥¥Í∏∞:', eventId, eventName);
        setReviewModal({
            isOpen: true,
            eventId: eventId,
            eventName: eventName || 'ÌñâÏÇ¨'
        });
    };

    const handleCloseReviewModal = () => {
        setReviewModal({
            isOpen: false,
            eventId: null,
            eventName: ''
        });
    };

    const isEventEnded = (endTime) => {
        if (!endTime) return false;
        const now = new Date();
        const eventEndTime = new Date(endTime);
        return now > eventEndTime;
    };

    // ÏÉàÎ°úÍ≥†Ïπ® Ìï®Ïàò (pull-to-refresh Îì±ÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•)
    const handleRefresh = () => {
        setCurrentPage(0);
        setHasMore(true);
        fetchEvents(0, false);
    };

    if (loading) {
        return (
            <Layout pageTitle="ÎÇ¥Í∞Ä Îì±Î°ùÌïú ÌñâÏÇ¨" activeMenuItem="my-uploads">
                <div className="myuploadevent-container">
                    <div className="myuploadevent-loading">
                        <div className="myuploadevent-loading-dot"></div>
                        <div className="myuploadevent-loading-dot"></div>
                        <div className="myuploadevent-loading-dot"></div>
                    </div>
                </div>
            </Layout>
        );
    }

    return (
        <Layout pageTitle="ÎÇ¥Í∞Ä Îì±Î°ùÌïú ÌñâÏÇ¨" activeMenuItem="my-uploads">
            <div className="myuploadevent-container">
                {/* ÌÜµÌï© Ìó§Îçî */}
                <div className="myuploadevent-header">
                    <h1 className="myuploadevent-title">
                        ÎÇ¥Í∞Ä Îì±Î°ùÌïú ÌñâÏÇ¨ 
                        <span className="myuploadevent-count">({events.length})</span>
                    </h1>
                    <button 
                        className="myuploadevent-add-btn"
                        onClick={handleAddEvent}
                    >
                        + ÏÉà ÌñâÏÇ¨
                    </button>
                </div>

                {/* ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº (ÏÑ†ÌÉùÏÇ¨Ìï≠) */}
                <div className="myuploadevent-refresh">
                    <button 
                        className="myuploadevent-refresh-btn"
                        onClick={handleRefresh}
                        disabled={loading || loadingMore}
                    >
                        ÏÉàÎ°úÍ≥†Ïπ®
                    </button>
                </div>

                {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
                {events.length === 0 && !loading ? (
                    <div className="myuploadevent-empty">
                        <div className="myuploadevent-empty-icon">üìÖ</div>
                        <h2 className="myuploadevent-empty-title">Îì±Î°ùÎêú ÌñâÏÇ¨Í∞Ä ÏóÜÏñ¥Ïöî</h2>
                        <p className="myuploadevent-empty-desc">ÏÉàÎ°úÏö¥ ÌñâÏÇ¨Î•º Îì±Î°ùÌï¥ Î≥¥ÏÑ∏Ïöî!</p>
                        <button 
                            className="myuploadevent-empty-button"
                            onClick={handleAddEvent}
                        >
                            Ï≤´ ÌñâÏÇ¨ ÎßåÎì§Í∏∞
                        </button>
                    </div>
                ) : (
                    <>
                        <div className="myuploadevent-events-container">
                            {events.map((event, index) => {
                                const eventEnded = isEventEnded(event.endTime);
                                // Í≥†Ïú†Ìïú key ÏÉùÏÑ±: IDÍ∞Ä ÏûàÏúºÎ©¥ ID ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ indexÏôÄ Îã§Î•∏ ÏÜçÏÑ± Ï°∞Ìï©
                                const uniqueKey = event.id ? `event-${event.id}` : `event-${index}-${event.name}-${event.createTime}`;
                                
                                return (
                                    <div key={uniqueKey} className="myuploadevent-event-wrapper">
                                        <EventCard
                                            id={event.id}
                                            image={event.posterId ? `https://gateway.gamja.cloud/api/image/${event.posterId}` : null}
                                            title={event.name || 'ÌñâÏÇ¨Î™Ö ÏóÜÏùå'}
                                            summary={markdownToText(event.description)}
                                            hashtags={event.hashtags || []}
                                            date={event.startTime ? formatDate(event.startTime) : 'ÎÇ†Ïßú ÎØ∏Ï†ï'}
                                            time={event.startTime ? formatTime(event.startTime) : 'ÏãúÍ∞Ñ ÎØ∏Ï†ï'}
                                            location={event.address || 'Ïû•ÏÜå ÎØ∏Ï†ï'}
                                            fee={event.entryFee ? `${event.entryFee.toLocaleString()}Ïõê` : 'Î¨¥Î£å'}
                                            bookmarked={false}
                                            onBookmarkToggle={() => handleBookmarkToggle(event.id)}
                                            onClick={handleEventClick}
                                        />
                                        
                                        {/* ÌñâÏÇ¨ Ï¢ÖÎ£å Ïó¨Î∂ÄÏóê Îî∞Î•∏ Î≤ÑÌäº */}
                                        <div className="myuploadevent-action-buttons">
                                            {eventEnded ? (
                                                <button 
                                                    className="myuploadevent-action-btn review-btn"
                                                    onClick={() => handleViewReviews(event.id, event.name)}
                                                >
                                                    Î¶¨Î∑∞ Î≥¥Í∏∞
                                                </button>
                                            ) : (
                                                <button 
                                                    className="myuploadevent-action-btn edit-btn"
                                                    onClick={() => handleEditEvent(event)}
                                                >
                                                    ÏàòÏ†ïÌïòÍ∏∞
                                                </button>
                                            )}
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                        
                        {/* Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ */}
                        {loadingMore && (
                            <div className="myuploadevent-loading-more">
                                <div className="myuploadevent-loading-spinner"></div>
                                <p>Îçî ÎßéÏùÄ ÌñâÏÇ¨Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                            </div>
                        )}
                        
                        {/* Îçî Ïù¥ÏÉÅ Î∂àÎü¨Ïò¨ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Îïå */}
                        {!hasMore && events.length > 0 && (
                            <div className="myuploadevent-no-more">
                                <p>Î™®Îì† ÌñâÏÇ¨Î•º Î∂àÎü¨ÏôîÏäµÎãàÎã§</p>
                            </div>
                        )}
                    </>
                )}
            </div>
            
            {/* Î¶¨Î∑∞ Î™®Îã¨ */}
            <ReviewModal 
                isOpen={reviewModal.isOpen}
                onClose={handleCloseReviewModal}
                eventId={reviewModal.eventId}
                eventName={reviewModal.eventName}
            />
        </Layout>
    );
};

export default MyUploadEvent;